"""
아이디어:
1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
2. X가 2로 나누어 떨어지면, 2로 나눈다.
3. 1을 뺀다.

1로 만드는 연산의 최소 횟수
/3 > /2 > -1 순으로 숫자를 많이 줄어들게 하므로 그리디!

시간초과 -> DP 의심해보자
메모이제이션 가능 ?
dp[i]: i 를 만들기 위한 최소 연산 횟수
dp[i] = min(dp[i-1]+1, if i % 2 == 0: dp[i//2]+1, if i % 3 == 0: dp[i//3]+1)


시간복잡도:
N: 1000000
시간제한: 0.15 

자료구조:
"""

# # 일반풀이 -> 시간초과
# N = int(input())

# count = 0
# while True:
# 	if N % 3 == 0:
# 		N = N % 3
# 	elif N % 2 == 0:
# 		N = N % 2
# 	else:
# 		N -= 1
# 	count += 1
# 	if N == 1:
# 		break
	
# print(count)

# dp 풀이
# dp[i] = dp[i-1]+1 (+1의 경우)
#         if i%2 == 0: dp[i//2]+1 
#         if i%3 == 0: dp[i//3]+1

N = int(input())

dp = [int(1e9)] * (N+1)
dp[0] = 0
dp[1] = 0

for i in range(2, N+1):
	dp[i] = dp[i-1]+1
	if i % 2 == 0:
		dp[i] = min(dp[i], dp[i//2]+1)
	if i % 3 == 0:
		dp[i] = min(dp[i], dp[i//3]+1)

print(dp[N]) 
