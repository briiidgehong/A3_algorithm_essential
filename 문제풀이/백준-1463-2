"""
아이디어:
if x % 3 == 0:
	x // 3
elif x % 2 == 0:
	x // 2
else:
	x -= 1
-> (10->5->4->2->1 / 10->9->3->1) ??
-> 단순히 그리디 방식으로는 최소값을 구하지 못함

N을 1로 만드는 연산 횟수의 최솟값

DP
	dp / 상향식
	dp[0] = 0
	dp[1] = 0
	dp[2] = 1
	dp[3] = 1
	dp[4] = 2
	dp[5] = 3
	
	dp[i] = i를 1로 만들기 위한 연산 횟수의 최소값
	dp[i] = min(dp[i-1]+1, 
				if i % 3 == 0: dp[i//3]+1, 
				if i % 2 == 0: dp[i//2]+1)


시간복잡도:
0.15초 / 15만회 연산
N = 1000000

자료구조:
"""

N = int(input())

if N == 1:
	print(0)
elif N == 2:
	print(1)
else:
	dp = [int(1e9)] * (N+1)
	dp[0] = 0
	dp[1] = 0
	dp[2] = 1
	for i in range(3, N+1):
		# dp[i] = min(dp[i-1]+1, 
		# 		if i % 3 == 0: dp[i//3]+1, 
		# 		if i % 2 == 0: dp[i//2]+1)
		dp[i] = dp[i-1]+1
		if i % 3 == 0:
			dp[i] = min(dp[i], dp[i//3]+1)
		if i % 2 == 0:
			dp[i] = min(dp[i], dp[i//2]+1)
	
	print(dp[N])

