"""
양방향 가중치 그래프 
모든 컴퓨터를 연결하는데 필요한 최소비용

최단경로? 다익스트라 / 플로이드 와샬 ?
	특정 노드에서 특정 노드까지의 최단경로 X

최소 스패닝 트리? 크루스칼 / 프림 ?
	모든 노드가 최소의 비용으로 연결 O

V: 1000
E: 100 000

크루스칼:
	"union find 사용, 전체 간선 중 작은것부터 연결"
	O(ElogE) = 100 000 * 5
프림:
	"heapq 사용, 현재 연결된 트리에 이어진 간선 중 가장 작은것을 연결"
	O(ElogV) = 100 000 * 3

"""

# 크루스칼 풀이
V = int(input())
E = int(input())

cost_list = []
for _ in range(E):
	start, end, cost = map(int, input().split())
	cost_list.append((cost, start, end))

cost_list.sort() # 0번 index 기준으로 정렬됨

parent_table = [0] * (V+1)
for idx in range(1, V+1):
	parent_table[idx] = idx

def find_parent(x):
	if x != parent_table[x]:
		parent_table[x] = find_parent(parent_table[x])
	return parent_table[x]

def union_parent(a,b):
	a = find_parent(a)
	b = find_parent(b)
	if a <= b:
		parent_table[b] = a
	else:
		parent_table[a] = b

min_cost = 0
for cost, start, end in cost_list:
	start = find_parent(start)
	end = find_parent(end)
	if start == end: # 사이클이 존재하면,
		continue
	else:
		union_parent(start, end)
		min_cost += cost
print(min_cost)
