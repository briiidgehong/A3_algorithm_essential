"""
별자리가 모두 이어지는 최소 스패닝 트리 
	크루스칼:
		"union find 사용, 가장 가중치가 작은 간선부터 추가, 사이클 허용 안됨"
"""

V = int(input())
V_list = list(idx for idx in range(1,V+1))
x_y_list = [(0,0)]
for _ in range(V):
	x, y = map(float, input().split())
	x_y_list.append((x,y))

# step 1. 간선 가중치 구하기
from itertools import combinations
import math
comb_list = list(combinations(V_list, 2))
edge_list = []
for start, end in comb_list:
	start_x, start_y = x_y_list[start]
	end_x, end_y = x_y_list[end]
	x = abs(start_x-end_x)
	y = abs(start_y-end_y)
	cost = math.sqrt((x * x) + (y * y))
	edge_list.append((cost, start, end))
edge_list.sort()

# step 2. 크루스칼 돌리기
def find(x):
	if x != parent_table[x]:
		parent_table[x] = find(parent_table[x])
	return parent_table[x]

def union(a,b):
	a = find(a)
	b = find(b)
	if a <= b:
		parent_table[b] = a
	else:
		parent_table[a] = b
		
min_cost = 0
parent_table = [0] * (V+1)
for idx in range(1, V+1):
	parent_table[idx] = idx
for each_cost, each_start, each_end in edge_list:
	start = find(each_start)
	end = find(each_end)
	if start == end: # 사이클이 존재하면
		continue
	else: # 사이클이 존재하지 않으면
		union(each_start, each_end)
		min_cost += each_cost
print(round(min_cost, 2))
