"""
아이디어:
최소 한칸 이상 띄어서 약탈
얻을 수 있는 식량의 최대값

DP:
	점화식: 
	dp[i] = max(현재인덱스를 선택하는 경우, 이전인덱스를 선택하는 경우)
	dp[i] = max(food[i]+dp[i-2], dp[i-1])
	
	dp[1] = 1
	dp[2] = max(3, 1)
	dp[3] = max(1+1, 3)
	dp[4] = max(5+3, 3) = 8
	

시간복잡도:
N: 100

자료구조:
dp_table
food_table 

"""

# dp[i] = max(food[i]+dp[i-2], dp[i-1])
N = int(input())

food = [0]
food.extend(list(map(int, input().split())))

dp = [0] * (N+1)
dp[0] = 0
dp[1] = food[1]

for idx in range(2, N+1):
	dp[idx] = max(food[idx]+dp[idx-2], dp[idx-1])
	
print(dp[N])
