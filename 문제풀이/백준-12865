"""
아이디어:
0/1 knapsack -> DP
	특정 물건을 포함을 안시키거나, 시키거나
	dp_table[보석][가방무게(1~가방무게의 최대값)] 
	= 가능한 보석 가치의 최대 합
	
	점화식: dp[i][j] = max(dp[i-1][j], d[i-1][j-weight[i]]+value[i])
	
	dp_table: for i in range(보석)
				for j in range(가방무게)
					max(i가 포함되지 않는경우 / i 포함되는 경우)
		
				 0  1  2  3  4  5  6   7
	보석1: 6/13  -  -  -  -  -  -  13  13
	보석2: 4/8   -  -  -  -  8  8  13  13
	보석3: 3/6   -  -  -  6  8  8  13  14
	보석4: 5/12  -  -  -  6  8  12 13  14
	
시간복잡도:
메모이제이션 테이블 없이 그냥 일반풀이로 진행할 경우
-> O(2^N) N:100 이므로 시간초과

메모이제이션 테이블 활용
보석: 100
크기: 100000
-> O(보석 * 크기) 100000 00 < 2초(2억) = 시간통과

자료구조:
2차원 dp_table 

"""

N, K = map(int, input().split())

w_v = [[0,0]]

for idx in range(N):
	w_v.append(list(map(int, input().split())))

dp = list([0]*(K+1) for _ in range(N+1))

for i in range(1, N+1):
	for j in range(1, K+1):
		w = w_v[i][0]
		v = w_v[i][1]
		
		if j < w:
			dp[i][j] = dp[i-1][j]
		else:
			dp[i][j] = max(
				dp[i-1][j], # i보석이 포함 안되는 경우
				dp[i-1][j-w]+v # i보석이 포함되는 경우
				)

print(dp[-1][-1])
