"""
백준 1197 최소 스패닝 트리
최소 스패닝 트리 (MST):
	사이클:
		시작점과 끝이 같은 노드인 형태
	트리 < 그래프:
		트리는 그래프의 특수한 형태
		그래프: 사이클이 존재
		트리: 사이클이 존재하지 않음
	
	스패닝 트리: <<사이클이 없고, 노드가 모두 이어져 있는 그래프>>
	최소 스패닝 트리: 스패닝 트리중 가중치의 합이 가장 작은 스패닝 트리

	즉, 최소스패닝트리란
		사이클이없고, 노드가 모두 이어진, 가중치의 합이 가장 적은 트리
	
	MST 알고리즘
		크루스칼: 
			"union find 사용, 전체 간선 중 작은것부터 연결"
			O(ElogE) = 100 000 * 5
		프림:
			"힙 사용하여, 현재 연결된 트리에 
							이어진 간선중 가장 작은것을 추가"
			O(ElogV) = 100 000 * 4
	V: 10000
	E: 100 000	
"""

V, E = map(int, input().split())

# 크루스칼
MST_cost_sum_k = 0
def find_parent(x):
	if x != parent_table[x]:
		parent_table[x] = find_parent(parent_table[x])
	return parent_table[x]
def union_parent(a,b):
	a = find_parent(a)
	b = find_parent(b)
	if a <= b:
		parent_table[b] = a
	else:
		parent_table[a] = b

parent_table = [0] * (V+1)
for idx in range(1, V+1):
	parent_table[idx] = idx

edges = []
for _ in range(E):
	start, end, cost = map(int, input().split())
	edges.append((cost, start, end))
edges.sort()

for edge_cost, edge_start, edge_end in edges:
	start = find_parent(edge_start)
	end = find_parent(edge_end)

	# 같으면 간선을 이었을때 사이클이 발생하기 때문에 이으면 안됨
	# 같지 않아야만 간선을 이었을때 사이클이 발생하지 않음
	if start != end:
		union_parent(edge_start, edge_end)
		MST_cost_sum_k += edge_cost

# print(f"MST_cost_sum_k: {MST_cost_sum_k}")
print(MST_cost_sum_k)


# 프림
graph = {}
for idx in range(1, V + 1):
    graph[idx] = []

for _ in range(E):
    start, end, cost = map(int, input().split())
    graph[start].append((cost, end))
    graph[end].append((cost, start))

import heapq
queue = []
visited = [False] * (V + 1)
heapq.heappush(queue, (0, 1))

MST_cost_sum_p = 0
while queue:
    poped_cost, poped_node = heapq.heappop(queue)
    if visited[poped_node] == False:
        visited[poped_node] = True
        MST_cost_sum_p += poped_cost

        for each_cost, each_node in graph[poped_node]:
            if visited[each_node] == False:
                heapq.heappush(queue, (each_cost, each_node))
# print(f"MST_cost_sum_p: {MST_cost_sum_p}")
print(MST_cost_sum_p)
