"""
leetcode 17. Letter Combinations of a Phone Number
	출력형식 더러움... 직접 run 돌리지 않고, 테스트케이스만 맞추고 pass
	
아이디어:
key_string map dictionary
숫자의 조합 - 중복순열 - product / 백트래킹 풀이

시간복잡도:
자료구조:

TestCase:
	input: 2
	output: ["a", "b", "c"]
	input: 23
	output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
"""

key_map = {
    2: ["a","b","c"],
    3: ["d","e","f"],
    4: ["g","h","i"],
    5: ["j","k","l"],
    6: ["m","n","o"],
    7: ["p","q","r","s"],
    8: ["t","u","v"],
    9: ["w","x","y","z"],
}

# # 1. product 풀이
# from itertools import product
# input_list = list(map(int, input()))

# if len(input_list) == 0:
# 	print([])
# elif len(input_list) == 1:
# 	result_list = key_map[input_list[0]]
# 	print(result_list)
# else:
# 	result_list = key_map[input_list[0]]
# 	for idx in range(1, len(input_list)):
# 		result_list = list(product(result_list, key_map[input_list[idx]]))
# 	for idx in range(len(result_list)):
# 		result_list[idx] = "".join(result_list[idx])
# 	print(result_list, end="")
	
# 2. 백트래킹 풀이
input_list = list(map(int, input()))
result_list = []
def recur(recur_idx, recur_str):
	if recur_idx == len(input_list):
		result_list.append(recur_str)
		return
	key = input_list[recur_idx]
	for each_str in key_map[key]:
		recur(recur_idx+1, recur_str + each_str)
recur(0, "")
print(result_list)
