"""
아이디어:
채굴자가 얻을수 있는 금의 최대 크기
dp_table 활용:
	점화식: 
	dp[i] = max()
	-> max값으로 map 채우기
	
시간복잡도:
x, y: 20

자료구조:

""
y, x = map(int, input().split())
map_list = [] # = dp_table

for _ in range(y):
	map_list.append(list(map(int, input().split())))

# 왼위 / 왼 / 왼아래 에서 오는 경우
from_move = [[-1,-1],[0,-1],[1,-1]]

for idx_x in range(1, x):
	for idx_y in range(y):
		candidate_list = []
		for move in from_move:
			moved_y = move[0] + idx_y
			moved_x = move[1] + idx_x
			if moved_y >= 0 and moved_y < y and moved_x >= 0 and moved_x < x:
				candidate_list.append(map_list[moved_y][moved_x])
		map_list[idx_y][idx_x] += max(candidate_list)

last_nodes = []
for idx_y in range(y):
	last_nodes.append(map_list[idx_y][x-1])
print(max(last_nodes))
