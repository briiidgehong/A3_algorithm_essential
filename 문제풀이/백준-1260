"""
백준 1260 DFS 와 BFS
아이디어:
BFS / DFS "그래프 탐색" 결과 출력
단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문
 
시간복잡도:
N: 1000 노드
M: 10000 간선
 
자료구조:
graph = {}
graph["start"] = ["end", "end", "end"]
 
"""
 
N, M, start_node = map(int, input().split())
 
# 노드 초기화
graph = {}
for node in range(1, N+1):
	graph[node] = []
 
# 간선 추가
for _ in range(M):
	start, end = map(int, input().split())
	graph[start].append(end)
	graph[end].append(start)
 
# 정렬: 정점 번호가 작은것부터 방문할수 있도록
for key, value in graph.items():
	sorted_value = sorted(value)
	graph[key] = sorted_value
 
# DFS - 재귀 사용
def dfs(node, visited):
	visited[node] = True
	for each_node in graph[node]:
		if visited[each_node] == False:
			visited[each_node] = True
			dfs_result_list.append(each_node)
			dfs(each_node, visited)
 
bfs_visited = [False] * (N+1)
dfs_result_list = [] # 노드 방문 순서
dfs_result_list.append(start_node)
dfs(start_node, bfs_visited)
 
for each in dfs_result_list:
	print(each, end=" ")
print("")

# BFS - while queue 사용
from collections import deque
 
bfs_visited = [False] * (N+1)
bfs_result_list = [] # 방문 노드 순서
 
queue = deque()
queue.append(start_node)
bfs_visited[start_node] = True
bfs_visited.append(start_node)
bfs_result_list.append(start_node)
 
while queue:
	poped_node = queue.popleft()
	for end_node in graph[poped_node]:
		if bfs_visited[end_node] == False:
			bfs_visited[end_node] = True
			queue.append(end_node)
			bfs_result_list.append(end_node)
 
for each in bfs_result_list:
	print(each, end=" ")
