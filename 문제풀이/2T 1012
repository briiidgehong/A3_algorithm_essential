T = int(input())
for _ in range(T):
	X, Y, K = map(int, input().split())
	# x 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)
	# y 세로길이 N(1 ≤ N ≤ 50)
	# k 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)
	map_list = list([0] * X for _ in range(Y))
	for _ in range(K):
		sub_x, sub_y = map(int, input().split())
		map_list[sub_y][sub_x] = 1
	
	# BFS
	move = [(-1,0),(1,0),(0,-1),(0,1)]
	visited = list([False] * X for _ in range(Y))
	
	result_count = 0
	for idx_y in range(Y):
		for idx_x in range(X):
			if visited[idx_y][idx_x] == False and map_list[idx_y][idx_x] == 1:
				result_count += 1
				from collections import deque
				queue = deque()
				queue.append((idx_y, idx_x))
				visited[idx_y][idx_x] = True
				while queue:
					poped_y, poped_x = queue.popleft()
					for move_y, move_x in move:
						moved_y = poped_y + move_y
						moved_x = poped_x + move_x
						if moved_y >= 0 and moved_y < Y and moved_x >= 0 and moved_x < X:
							if visited[moved_y][moved_x] == False and map_list[moved_y][moved_x] == 1:
								visited[moved_y][moved_x] = True
								queue.append((moved_y, moved_x))
	print(result_count)
