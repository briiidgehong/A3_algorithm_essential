"""
아이디어:
단방향 가중치 그래프의 최단경로
	다익스트라:
	플로이드 와샬:
	
시간복잡도:
N: 100
E: 100 000
O(N*VlogE) = 100 * 100 * 5 = 50000
O(V^3) = 100 00 00
자료구조:
"""

N = int(input())
M = int(input())
graph = {}
for idx in range(1, N+1):
	graph[idx] = []
for _ in range(M):
	start, end, cost = map(int, input().split())
	graph[start].append((cost, end))

result_min_table = []
# 각 노드를 출발점으로 dij 돌림
for start_node in range(1, N+1):
	import heapq
	queue = []
	min_table = [int(1e9)] * (N+1)
	heapq.heappush(queue, (0, start_node)) 
	min_table[start_node] = 0
	while queue:
		poped_cost, poped_node = heapq.heappop(queue)
		for next_cost, next_node in graph[poped_node]:
			if min_table[next_node] > poped_cost + next_cost:
				min_table[next_node] = poped_cost + next_cost
				heapq.heappush(queue, (poped_cost + next_cost, next_node))
	result_min_table.append(min_table[1:])
		
for each in result_min_table:
	for sub_each in each:
		if sub_each >= int(1e9):
			print(0, end=" ")
		else:
			print(sub_each, end=" ")
	print("")
