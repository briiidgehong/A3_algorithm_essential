"""
N 자리가 주어질때,
7331 / 733 / 73 / 7 와 같이 모두 소수인 수를 출력
다수의 소수
	에라토스테네스의 체 -> 메모리 초과
		"2부터 N까지 수의 나열 / 소수의 곱인 숫자들 제외"
그냥 개선된 소수판별 사용
"""

N = int(input())

# 개선된 소수 판별 + dfs -> 통과
import math
def is_sosu(x):
	if x == 1:
		return False
	for idx in range(2, int(math.sqrt(x))+1):
		if x % idx == 0:
			return False
	return True

result_list = []
def dfs(num):
	if len(str(num)) == N:
		print(num)
	else:
		for idx in range(1, 10):
			new_num = str(num) + str(idx)
			if is_sosu(int(new_num)):
				dfs(int(new_num))
dfs(2)
dfs(3)
dfs(5)
dfs(7)

# 일반 10**(N-1) ~ 10**N 까지 개선된 소수 판별 -> 시간 초과
# # 에라토스테네스의 체 -> 메모리 초과
# num = 1
# for _ in range(N):
# 	num = num * 10

# sosu_table = [True] * (num+1)
# import math
# for idx in range(2, int(math.sqrt(num))+1):
# 	sub_idx = (idx * 2)
# 	while sub_idx <= num:
# 		sosu_table[sub_idx] = False
# 		sub_idx += idx
		
# sosu_list = []
# for idx in range(int(num/10), num):
# 	if sosu_table[idx] == True:
# 		sosu_list.append(idx)


# result_list = []
# for idx in sosu_list:
# 	str_idx = str(idx)
# 	if str_idx[0] == "1":
# 		continue
# 	flag = True
# 	while len(str_idx) > 0:
# 		if sosu_table[int(str_idx)] == False:
# 			flag = False
# 			break
# 		str_idx = str_idx[:-1]
# 	if flag:
# 		result_list.append(idx)

# print(result_list)
