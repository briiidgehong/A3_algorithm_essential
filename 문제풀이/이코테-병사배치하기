"""
아이디어:
N명의 병사 / 무작위로 나열되어 있음
전투력이 높은 병사가 앞쪽에 오도록 배치
병사를 하나씩 빼서 조건을 맞추고 / 남아있는 병사의 수를 최대로

dp_table 활용:
	dp[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이
	LIS 알고리즘:
		0 <= j < i
		if array[i] > array[j]
		dp[i] = max(dp[i], dp[j]+1)

시간복잡도:
N:2000

자료구조:
"""

N = int(input())
array = list(map(int, input().split()))

# 순서를 뒤집어 "LIS: 가장 긴 증가하는 부분수열" 알고리즘 문제로 변환
# 가장 긴 증가하는/감소하는 둘다 아래와 같이 reverse로 배열을 뒤집어주면,
# 가장 긴 증가하는 부분수열 로 바꾸어 풀수 있다.
array.reverse()

dp = [1] * N

for i in range(1, N):
	for j in range(0, i):
		if array[j] < array[i]:
			# 왜 +1?? dp[j]에 array[i] 까지 부분수열로 추가되므로
			dp[i] = max(dp[i], dp[j]+1)

print(N - max(dp))
