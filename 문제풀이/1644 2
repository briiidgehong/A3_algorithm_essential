"""
자연수가 주어졌을 때, 
이 자연수를 연속된 소수의 합으로 나타낼 수 있는 
경우의 수를 구하시오
41 = 41 / 11+13+17 / 2+3+5+7+11+13 -> 3가지
구간합 -> 투포인터
소수판별 -> 일반 / 에라토스테네스의 체
"""

N = int(input())
prime_num_list = []

# # check point 일반 소수판별
# import math
# def is_prime_number(x):
# 	for idx in range(2, int(math.sqrt(x))+1):
# 		if x % idx == 0:
# 			return False
# 	return True

# for each in range(2, N+1):
# 	if is_prime_number(each):
# 		prime_num_list.append(each)

# check point 에라토스테네스의 체 소수판별 -> 시간 1/10
sosu_table = [True for _ in range(N+1)]
import math
for idx in range(2, int(math.sqrt(N))+1):
    if sosu_table[idx] == True:
        sum_idx = (idx * 2)
        while sum_idx <= N:
        	sosu_table[sum_idx] = False
        	sum_idx += idx
for idx in range(2, N+1):
    if sosu_table[idx] == True:
        prime_num_list.append(idx)

start = 0
end = 0
if len(prime_num_list) == 0:
	print(0)
else:
	sum_num = prime_num_list[0]
	result_count = 0
	while start <= end:
		if sum_num < N:
			end += 1
			if end == len(prime_num_list):
				break
			sum_num += prime_num_list[end]
		else:
			if sum_num == N:
				result_count += 1
			sum_num -= prime_num_list[start]
			start += 1
	print(result_count)
		
		
	
	

