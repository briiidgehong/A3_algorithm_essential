"""
num_list = [1,2,3,4]
str_list = ['a', 'b']

순열: 순서 구분해서 두개를 뽑음 (1,4) != (4,1)
	from itertools import permutations
	permutations(num_list, 2)
	# [(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), 
	# (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]

조합: 순서 구분하지 않고 두개를 뽑음 (1,4) = (4,1)
	from itertools import combinations
	combinations(num_list, 2)
	# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]

중복순열:
	from itertools import product
	product(num_list, str_list)
	# [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b'), 
	# (3, 'a'), (3, 'b'), (4, 'a'), (4, 'b')]
	
	product(num_list, repeat=2)
	# [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), 
	# (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]
	
중복조합:
	from itertools import combinations_with_replacement
	combinations_with_replacement(num_list, 2)
	# [(1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), 
	# (2, 4), (3, 3), (3, 4), (4, 4)]
"""


"""
순열과 조합의 for문 구현의 차이
4개의 수가 주어졌을때 2의 수로 만들수 있는 순열과 조합을 구하여라
"""

num_list = [1,2,3,4]


# 순열 (= idx 기준[value 기준 아님], (1,2)와 (2,1) 을 각각 하나의 경우의 수로 취급
permutations = []
for idx_1 in range(len(num_list)):
	for idx_2 in range(len(num_list)):
		if idx_1 != idx_2:
			permutations.append((num_list[idx_1], num_list[idx_2]))
			
# 조합 (= idx 기준[value 기준 아님], (1,2)와 (2,1) 을 하나의 경우의 수로 취급 
# 백준 1182 연결 !!
combinations = []
for idx_1 in range(len(num_list)):
	for idx_2 in range(idx_1+1, len(num_list)):
		combinations.append((num_list[idx_1], num_list[idx_2]))

print(f"순열: {permutations}")
# 순열: [(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), 
# (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]

print(f"조합: {combinations}")
# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]

		



