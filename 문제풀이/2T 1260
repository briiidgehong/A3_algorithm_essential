N, E, start_node = map(int, input().split()) # 노드, 간선

graph = {}
for idx in range(1, N+1):
	graph[idx] = []
for _ in range(E):
	start, end = map(int, input().split())
	graph[start].append(end)
	graph[end].append(start)
	
# 정점번호가 작은 것을 먼저 방문한다.
for idx in range(1, N+1):
	graph[idx] = sorted(graph[idx])

# DFS
def dfs(node):
	for each_node in graph[node]:
		if visited[each_node] == False:
			visited[each_node] = True
			visited_list.append(each_node)
			dfs(each_node)

visited = [False] * (N+1)
visited_list = [start_node]
visited[start_node] = True
dfs(start_node)

for each in visited_list:
	print(each, end=" ")
print("")
	
# BFS
from collections import deque
queue = deque()
queue.append(start_node)
visited = [False] * (N+1)
visited[start_node] = True
visited_list = [start_node]
while queue:
	poped_node = queue.popleft()
	for each_node in graph[poped_node]:
		if visited[each_node] == False:
			visited[each_node] = True
			visited_list.append(each_node)
			queue.append(each_node)
for each in visited_list:
	print(each, end=" ")
