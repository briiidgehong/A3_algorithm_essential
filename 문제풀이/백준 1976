"""
동혁이는 친구들과 함께 여행을 가려고 한다. 
도시가 N개 있고 임의의 두 도시 사이에 길이 있을 수도, 없을 수도 있다. 
동혁이의 여행 일정이 주어졌을 때, 이 여행 경로가 가능한 것인지 알아보자. 
도시들의 개수와 도시들 간의 연결 여부가 주어져 있고, 
동혁이의 여행 계획에 속한 도시들이 순서대로 주어졌을 때 
가능한지 여부를 판별하는 프로그램을 작성하시오. 

여행경로가 이어져 있는지, 같은 집합에 속하는지?
union find:
	union_parent / find_parent (경로압축)
	
"""

N = int(input()) # 노드
M = int(input()) # 간선

def union_parent(a,b):
	a = find_parent(a)
	b = find_parent(b)
	if a <= b:
		parent_table[b] = a
	else:
		parent_table[a] = b

def find_parent(x):
	if x != parent_table[x]:
		parent_table[x] = find_parent(parent_table[x])
	return parent_table[x]

parent_table = [0] * (N+1)
for idx in range(1, len(parent_table)):
	parent_table[idx] = idx
	
for idx_1 in range(N):
	input_list = list(map(int, input().split()))
	for idx_2, value in enumerate(input_list):
		if value == 1:
			union_parent(idx_1+1, idx_2+1)

trip_nodes = list(map(int, input().split()))
flag = "YES"
parent = find_parent(parent_table[trip_nodes[0]])
for idx in range(1, len(trip_nodes)):
	if parent != find_parent(parent_table[trip_nodes[idx]]):
		flag = "NO"
		break
print(flag)
	
