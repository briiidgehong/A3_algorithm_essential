
"""
아이디어:
참조: https://www.youtube.com/watch?v=pXH4FAMVjOs
LCS 가장 긴 공통 부분 수열
	dp[i][j] = 첫번째 문자열의 i 까지 고려하고,
	           두번째 문자열의 j 까지 고려했을때
	           가능한 공통 부분 수열의 최장 길이
	           
	i = 0 일때, j = 0 일때 각각 dp_table 초기화
	노드 하나씩 방문하면서 채워넣기 dp[i][j]가 최종 답
	
	점화식:
		# 같으면, 대각선 위 + 1
		# 다르면, max(왼쪽, 위쪽)
		if array_1[i] == array_2[j]:
			dp[i][j] = dp[i-1][j-1] + 1
		else: # array_1[i] != array_2[j]:
			dp[i][j] = max(dp[i-1][j], dp[i][j-1])
	
시간복잡도:
자료구조:

"""

# ACAYKP
# CAPCAK
s1 = list(input())
s2 = list(input())

dp_table = list([0] * (len(s1)+1) for _ in range(len(s2)+1))

# 따로 초기화 안해도 되도록 초기화 index를 하나씩 더 잡아서 0으로 초기화 해줌
# 같으면 0 + 1 / 다르면, max(왼쪽, 위쪽) 똑같이 적용하면 초기화 된다.

# 0   0 0 0 0 0 0
#     A C A Y K P
# 0 C 0 1 1 1 1 1
# 0 A 1 1 2 2 2 2
# 0 P 1 1 1 1 1 3
# 0 C 1 2 2 2 2 3
# 0 A 1 2 3 3 3 3
# 0 K 1 2 3 3 4 4

for idx_2 in range(1, len(s2)+1):
	for idx_1 in range(1, len(s1)+1):
		if s2[idx_2-1] == s1[idx_1-1]:
			dp_table[idx_2][idx_1] = dp_table[idx_2-1][idx_1-1] + 1
		else:
			dp_table[idx_2][idx_1] = max(dp_table[idx_2][idx_1-1], dp_table[idx_2-1][idx_1]) 

print(dp_table[-1][-1])
